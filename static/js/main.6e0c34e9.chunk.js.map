{"version":3,"sources":["components/Header/Header.js","components/Image/Image.js","util/Unsplash.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","handleViewAnother","bind","assertThisInitialized","option","setState","searchUnsplash","react_default","a","createElement","className","id","type","data-toggle","aria-haspopup","aria-expanded","onClick","handleNewSearch","React","Component","Image","unsplashData","src","imgURL","href","userProfile","username","Unsplash","term","fetch","concat","then","response","json","jsonResponse","App","userName","_this2","data","urls","regular","user","name","links","html","components_Header_Header","components_Image_Image","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e0c34e9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\n\r\nclass Header extends React.Component{\r\n    \r\n constructor(props){\r\n    super(props);\r\n    this.state = { text: 'motivation' };\r\n    this.handleViewAnother = this.handleViewAnother.bind(this);\r\n   \r\n  }\r\n    \r\n    \r\n    handleNewSearch(option){\r\n        this.setState({text: option});\r\n        this.props.searchUnsplash(option);\r\n    }\r\n    \r\n        \r\n    handleViewAnother(){\r\n        this.props.searchUnsplash(this.state.text);\r\n    }\r\n\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <header className=\"row\">\r\n                <div className=\"col-12 animated fadeInDown\">\r\n                    <h1>Get your daily dose of</h1>\r\n                    <div className=\"forward\">\r\n                        <div className=\"btn-group dropright\">\r\n                            <p id=\"cursive\">{this.state.text}</p>\r\n                            <button type=\"button\" className=\"btn btn-sm dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                <span className=\"sr-only\">Toggle Dropdown</span>\r\n                            </button>\r\n                            <div className=\"dropdown-menu\">\r\n                                <a className=\"dropdown-item\" onClick={this.handleNewSearch.bind(this, 'motivation')}>motivation</a>\r\n                                <a className=\"dropdown-item\" onClick={this.handleNewSearch.bind(this, 'fitness')}>fitness</a>\r\n                                <a className=\"dropdown-item\" onClick={this.handleNewSearch.bind(this, 'yoga')}>yoga</a>\r\n                                <a className=\"dropdown-item\" onClick={this.handleNewSearch.bind(this, 'zen')}>zen</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n                <section className=\"row\">\r\n                    <button className=\"btn\" id=\"new-img\" onClick={this.handleViewAnother}>View Another</button>\r\n                </section>\r\n                   \r\n            </header>\r\n        );\r\n        \r\n    }    \r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Image.css';\r\n\r\nclass Image extends React.Component{\r\n\r\n\r\n    \r\n    \r\n    \r\n    render() {\r\n        \r\n        const {unsplashData} = this.props;\r\n        \r\n        \r\n        return(\r\n            <div>\r\n                <main className=\"row\">\r\n                     <div className=\"col-12 image\">\r\n                        <img src={this.props.imgURL} />\r\n                    </div>\r\n                </main>\r\n\r\n               <section className=\"row\" id=\"attribution\">\r\n                  <div className=\"col-12\" id=\"name\">\r\n                        <a href={this.props.userProfile}>{this.props.username}</a>\r\n                   </div>\r\n               </section>\r\n            </div>\r\n            ); \r\n    }\r\n}\r\n\r\nexport default Image;","const apiKey = 'c34218aefeb4f5210bd93096aabcf3e06d6020708582ceb8b9dac22007b3a1b9';\n\nconst Unsplash = {\n    searchUnsplash(term){\n        return fetch(`https://api.unsplash.com/photos/random/?client_id=${apiKey}&query=${term}`).then((response)=>{\n            return response.json();\n        }).then((jsonResponse)=>{\n            if(jsonResponse){\n                return jsonResponse;\n            }\n\n    }\n    \n)}};\n            \nexport default Unsplash;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header.js';\nimport Image from './components/Image/Image.js';\nimport Unsplash from './util/Unsplash.js';\n\n\n\n\nclass App extends React.Component{\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            imgURL: 'https://images.unsplash.com/photo-1535365860506-d8b700079e59?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2763&q=80',\n            userName: 'helloimnik',\n            userProfile: 'https://unsplash.com/@helloimnik'\n        };\n        \n        this.searchUnsplash = this.searchUnsplash.bind(this);\n    }\n    \n    searchUnsplash(term){\n        Unsplash.searchUnsplash(term).then((data)=>{\n           this.setState({imgURL: data.urls.regular,\n                         userName: data.user.name,\n                         userProfile: data.user.links.html});\n       }); \n    }\n\n    \n    render(){\n      return (\n          <div className=\"container\">\n              <Header searchUnsplash={this.searchUnsplash}/>\n        \n              <Image imgURL={this.state.imgURL} username={this.state.userName} userProfile={this.state.userProfile}/>\n\n\n          </div>\n\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}